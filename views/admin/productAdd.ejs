<%- include("../../views/partials/admin/header") %>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" />

<main class="flex-1 overflow-auto p-8">
  <!-- Header Section -->
  <div class="mb-8">
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-4">
        <a href="/admin/product" class="inline-flex items-center text-gray-600 hover:text-gray-900 transition-colors group">
          <i class="fas fa-arrow-left text-lg mr-2 group-hover:-translate-x-1 transition-transform"></i>
          <span class="font-medium">Back to Products</span>
        </a>
        <div class="h-6 w-px bg-gray-300"></div>
        <div>
          <h1 class="text-3xl font-bold text-gray-900">Add New Product</h1>
          <p class="text-gray-600 mt-1">Create a new product with variants and images</p>
        </div>
      </div>
      
      <button 
        onclick="window.history.back()" 
        class="text-gray-400 hover:text-gray-600 transition-colors duration-300"
      >
        <i class="fas fa-times text-2xl"></i>
      </button>
    </div>
  </div>

  <!-- Product Form -->
  <div class="bg-white rounded-2xl card-shadow border border-gray-100 overflow-hidden mb-8">
    <div class="px-8 py-6 border-b border-gray-100 bg-gray-50/50">
      <h2 class="text-xl font-semibold text-gray-900 flex items-center">
        <i class="fas fa-plus-circle text-primary mr-3"></i>
        Product Information
      </h2>
    </div>

    <form id="productForm" class="p-8 space-y-8">
      <!-- Basic Information -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <!-- Product Name -->
        <div class="space-y-2">
          <label class="block text-sm font-semibold text-gray-700">
            <i class="fas fa-tag text-primary mr-2"></i>Product Name
          </label>
          <input 
            type="text" 
            name="name" 
            class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:border-primary focus:ring-2 focus:ring-primary/20 transition-all duration-300 bg-gray-50 hover:bg-white"
            placeholder="Enter product name..."
          />
          <p id="name-error" class="text-red-500 text-sm hidden"></p>
        </div>

        <!-- Category -->
        <div class="space-y-2">
          <label class="block text-sm font-semibold text-gray-700">
            <i class="fas fa-list text-primary mr-2"></i>Category
          </label>
          <select 
            name="category" 
            class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:border-primary focus:ring-2 focus:ring-primary/20 transition-all duration-300 bg-gray-50 hover:bg-white"
          >
            <option value="">Select a category</option>
            <% categories.forEach(category => { %>
              <% if (category.isListed) { %>
                <option value="<%= category._id %>"><%= category.name %></option>
              <% } %>
            <% }) %>
          </select>
          <p id="category-error" class="text-red-500 text-sm hidden"></p>
        </div>
      </div>

      <!-- Description -->
      <div class="space-y-2">
        <label class="block text-sm font-semibold text-gray-700">
          <i class="fas fa-align-left text-primary mr-2"></i>Description
        </label>
        <textarea 
          name="description" 
          rows="4" 
          class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:border-primary focus:ring-2 focus:ring-primary/20 transition-all duration-300 bg-gray-50 hover:bg-white resize-none"
          placeholder="Enter product description..."
        ></textarea>
        <p id="description-error" class="text-red-500 text-sm hidden"></p>
      </div>

      <!-- Variants Section -->
      <div class="space-y-6">
        <div class="flex items-center justify-between">
          <h3 class="text-lg font-semibold text-gray-900 flex items-center">
            <i class="fas fa-layer-group text-primary mr-3"></i>
            Product Variants
          </h3>
          <button 
            type="button" 
            onclick="addVariant()"
            class="bg-gradient-to-r from-primary to-primary-hover text-white px-6 py-3 rounded-xl font-medium transition-all duration-300 hover:shadow-lg hover:-translate-y-0.5 flex items-center space-x-2"
          >
            <i class="fas fa-plus"></i>
            <span>Add Variant</span>
          </button>
        </div>

        <div id="variantsSection" class="space-y-6">
          <!-- Variants will be added here dynamically -->
        </div>

        <div id="noVariantsMessage" class="text-center py-12 bg-gray-50 rounded-xl border-2 border-dashed border-gray-300">
          <div class="flex flex-col items-center">
            <div class="w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mb-4">
              <i class="fas fa-layer-group text-2xl text-gray-400"></i>
            </div>
            <h3 class="text-lg font-medium text-gray-900 mb-2">No variants added yet</h3>
            <p class="text-gray-500 mb-4">Add product variants with different colors, types, and pricing</p>
            <button 
              type="button" 
              onclick="addVariant()"
              class="bg-gradient-to-r from-primary to-primary-hover text-white px-6 py-3 rounded-xl font-medium transition-all duration-300 hover:shadow-lg hover:-translate-y-0.5 flex items-center space-x-2"
            >
              <i class="fas fa-plus"></i>
              <span>Add First Variant</span>
            </button>
          </div>
        </div>
      </div>

      <!-- Submit Button -->
      <div class="flex items-center justify-end space-x-4 pt-8 border-t border-gray-200">
        <a 
          href="/admin/product"
          class="px-8 py-3 bg-gray-100 text-gray-700 rounded-xl font-medium hover:bg-gray-200 transition-colors duration-300"
        >
          Cancel
        </a>
        <button 
          type="submit" 
          class="bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white px-8 py-3 rounded-xl font-medium transition-all duration-300 hover:shadow-lg hover:-translate-y-0.5 flex items-center space-x-2"
        >
          <i class="fas fa-save"></i>
          <span>Add Product</span>
        </button>
      </div>
    </form>
  </div>
</main>

<!-- Cropper Modal -->
<div id="cropperModal" class="fixed inset-0 bg-black bg-opacity-70 z-50 hidden flex justify-center items-center">
  <div class="bg-white p-6 rounded-2xl shadow-2xl max-w-4xl w-full mx-4 relative">
    <div class="flex items-center justify-between mb-6">
      <h3 class="text-xl font-semibold text-gray-900 flex items-center">
        <i class="fas fa-crop text-primary mr-2"></i>
        Crop Image
      </h3>
      <button onclick="cancelCrop()" class="text-gray-400 hover:text-gray-600 transition-colors p-2 hover:bg-gray-100 rounded-lg">
        <i class="fas fa-times text-xl"></i>
      </button>
    </div>
    
    <div class="mb-6 bg-gray-100 rounded-xl p-4">
      <img id="cropperImage" class="max-w-full max-h-96 mx-auto rounded-lg" />
    </div>
    
    <div class="flex items-center justify-between">
      <div class="text-sm text-gray-600 bg-blue-50 px-4 py-2 rounded-lg border border-blue-200">
        <i class="fas fa-info-circle text-blue-500 mr-2"></i>
        Drag to adjust the crop area. Image will be resized to 640x640 pixels.
      </div>
      <div class="flex space-x-3">
        <button 
          onclick="cancelCrop()" 
          class="px-6 py-3 bg-gray-100 text-gray-700 rounded-xl font-medium hover:bg-gray-200 transition-colors duration-300"
        >
          Cancel
        </button>
        <button 
          onclick="cropImage()" 
          class="bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white px-6 py-3 rounded-xl font-medium transition-all duration-300 hover:shadow-lg hover:-translate-y-0.5 flex items-center space-x-2"
        >
          <i class="fas fa-crop"></i>
          <span>Crop & Save</span>
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Toast Notification -->
<div id="toast" class="fixed top-4 right-4 z-50 transform translate-x-full transition-transform duration-300">
  <div class="bg-white rounded-xl shadow-2xl border border-gray-200 p-4 flex items-center space-x-3 min-w-[300px]">
    <div id="toastIcon" class="flex-shrink-0"></div>
    <div class="flex-1">
      <p id="toastMessage" class="text-sm font-semibold text-gray-900"></p>
    </div>
    <button id="closeToast" class="flex-shrink-0 text-gray-400 hover:text-gray-600 p-1">
      <i class="fas fa-times"></i>
    </button>
  </div>
</div>

<!-- Scripts -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  let variantIndex = 0;
  let cropper, currentInput;

  // Enhanced image validation
  const ALLOWED_IMAGE_TYPES = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif'];
  const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB

  function validateImageFile(file) {
    if (!file) {
      showToast('Please select a file', 'error');
      return false;
    }

    // Check file type
    if (!ALLOWED_IMAGE_TYPES.includes(file.type.toLowerCase())) {
      showToast('Please select a valid image file (JPEG, PNG, WebP, or GIF)', 'error');
      return false;
    }

    // Check file size
    if (file.size > MAX_FILE_SIZE) {
      showToast('Image size should be less than 5MB', 'error');
      return false;
    }

    return true;
  }

  function addVariant() {
    const container = document.getElementById('variantsSection');
    const noVariantsMessage = document.getElementById('noVariantsMessage');
    
    // Hide no variants message
    noVariantsMessage.style.display = 'none';
    
    const variantDiv = document.createElement('div');
    variantDiv.className = 'bg-gray-50 border border-gray-200 rounded-2xl p-6 relative hover:shadow-md transition-all duration-300';
    variantDiv.setAttribute('data-index', variantIndex);
    variantDiv.style.opacity = '0';
    variantDiv.style.transform = 'translateY(20px)';
    
    variantDiv.innerHTML = `
      <div class="flex items-center justify-between mb-6">
        <h4 class="text-lg font-semibold text-gray-900 flex items-center">
          <i class="fas fa-cube text-primary mr-2"></i>
          Variant ${variantIndex + 1}
        </h4>
        <button 
          type="button" 
          onclick="removeVariant(this)" 
          class="text-red-500 hover:text-red-700 transition-colors duration-300 p-2 hover:bg-red-50 rounded-lg"
          title="Remove Variant"
        >
          <i class="fas fa-trash"></i>
        </button>
      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-6">
        <div class="space-y-2">
          <label class="block text-sm font-semibold text-gray-700">Type</label>
          <input 
            type="text" 
            name="variants[${variantIndex}][type]" 
            class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:border-primary focus:ring-2 focus:ring-primary/20 transition-all duration-300"
            placeholder="e.g., T-Shirt, Mug"
            required
          />
        </div>
        
        <div class="space-y-2">
          <label class="block text-sm font-semibold text-gray-700">Color</label>
          <input 
            type="text" 
            name="variants[${variantIndex}][color]" 
            class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:border-primary focus:ring-2 focus:ring-primary/20 transition-all duration-300"
            placeholder="e.g., Red, Blue"
            required
          />
        </div>
        
        <div class="space-y-2">
          <label class="block text-sm font-semibold text-gray-700">Quantity</label>
          <input 
            type="number" 
            min="1" 
            name="variants[${variantIndex}][quantity]" 
            class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:border-primary focus:ring-2 focus:ring-primary/20 transition-all duration-300"
            placeholder="0"
            required
          />
        </div>
        
        <div class="space-y-2">
          <label class="block text-sm font-semibold text-gray-700">Regular Price (₹)</label>
          <input 
            type="number" 
            min="1" 
            name="variants[${variantIndex}][regularPrice]" 
            class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:border-primary focus:ring-2 focus:ring-primary/20 transition-all duration-300"
            placeholder="0"
            required
          />
        </div>
        
        <div class="space-y-2">
          <label class="block text-sm font-semibold text-gray-700">Sale Price (₹)</label>
          <input 
            type="number" 
            min="1" 
            name="variants[${variantIndex}][salesPrice]" 
            class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:border-primary focus:ring-2 focus:ring-primary/20 transition-all duration-300"
            placeholder="0"
            required
          />
        </div>
      </div>
      
      <div class="space-y-4">
        <h5 class="text-md font-semibold text-gray-900 flex items-center">
          <i class="fas fa-images text-primary mr-2"></i>
          Product Images
          <span class="ml-2 text-xs text-gray-500 bg-gray-200 px-2 py-1 rounded-full">At least 1 image required</span>
        </h5>
        <div class="grid grid-cols-2 md:grid-cols-4 gap-6">
          ${[1, 2, 3, 4].map(i => `
            <div class="space-y-3">
              <label class="block text-sm font-medium text-gray-700">Image ${i} ${i === 1 ? '(Required)' : '(Optional)'}</label>
              <div class="relative image-upload-container">
                <input 
                  type="file" 
                  accept="image/jpeg,image/jpg,image/png,image/webp,image/gif" 
                  class="hidden image-input" 
                  onchange="handleImageUpload(event)" 
                  name="variants[${variantIndex}][productImage][]"
                  id="file-${variantIndex}-${i}"
                  ${i === 1 ? 'required' : ''}
                />
                <label 
                  for="file-${variantIndex}-${i}" 
                  class="upload-label flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-xl cursor-pointer bg-gray-50 hover:bg-gray-100 transition-all duration-300 hover:border-primary"
                >
                  <div class="flex flex-col items-center justify-center pt-5 pb-6">
                    <i class="fas fa-cloud-upload-alt text-2xl text-gray-400 mb-2"></i>
                    <p class="text-xs text-gray-500 text-center">Click to upload<br>JPEG, PNG, WebP, GIF</p>
                    <p class="text-xs text-gray-400 mt-1">Max 5MB</p>
                  </div>
                </label>
                <div class="preview-container absolute inset-0 w-full h-full rounded-xl hidden">
                  <img class="preview-image w-full h-full object-cover rounded-xl" />
                  <div class="absolute inset-0 bg-black bg-opacity-40 opacity-0 hover:opacity-100 transition-opacity duration-300 rounded-xl flex items-center justify-center">
                    <div class="flex space-x-2">
                      <button type="button" onclick="changeImage(this)" class="bg-white text-gray-700 px-3 py-1 rounded-lg text-xs hover:bg-gray-100 transition-colors">
                        <i class="fas fa-edit mr-1"></i>Change
                      </button>
                      <button type="button" onclick="removeImage(this)" class="bg-red-500 text-white px-3 py-1 rounded-lg text-xs hover:bg-red-600 transition-colors">
                        <i class="fas fa-trash mr-1"></i>Remove
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          `).join('')}
        </div>
      </div>
    `;
    
    container.appendChild(variantDiv);
    
    // Add animation
    setTimeout(() => {
      variantDiv.style.opacity = '1';
      variantDiv.style.transform = 'translateY(0)';
      variantDiv.style.transition = 'all 0.3s ease';
    }, 100);
    
    variantIndex++;
  }

  function removeVariant(button) {
    const variantBlock = button.closest('[data-index]');
    const container = document.getElementById('variantsSection');
    const noVariantsMessage = document.getElementById('noVariantsMessage');
    
    // Add fade out animation
    variantBlock.style.opacity = '0';
    variantBlock.style.transform = 'translateY(-20px)';
    
    setTimeout(() => {
      variantBlock.remove();
      
      // Show no variants message if no variants left
      if (container.children.length === 0) {
        noVariantsMessage.style.display = 'block';
      }
    }, 300);
  }

  function handleImageUpload(event) {
    const file = event.target.files[0];
    
    // Validate the image file
    if (!validateImageFile(file)) {
      event.target.value = ''; // Clear the input
      return;
    }

    currentInput = event.target;
    const reader = new FileReader();
    
    reader.onload = function (e) {
      const image = document.getElementById("cropperImage");
      image.src = e.target.result;
      document.getElementById("cropperModal").classList.remove("hidden");
      document.body.style.overflow = 'hidden';
      
      image.onload = () => {
        cropper?.destroy();
        cropper = new Cropper(image, {
          aspectRatio: 1,
          viewMode: 1,
          background: false,
          autoCropArea: 0.8,
          responsive: true,
          restore: false,
          guides: true,
          center: true,
          highlight: false,
          cropBoxMovable: true,
          cropBoxResizable: true,
          toggleDragModeOnDblclick: false,
        });
      };
    };
    
    reader.readAsDataURL(file);
  }

  function cropImage() {
    if (!cropper) {
      showToast('Cropper not initialized', 'error');
      return;
    }

    const canvas = cropper.getCroppedCanvas({
      width: 640,
      height: 640,
      imageSmoothingEnabled: true,
      imageSmoothingQuality: 'high',
    });

    canvas.toBlob(blob => {
      const croppedFile = new File([blob], `cropped-${Date.now()}.jpg`, { 
        type: "image/jpeg",
        lastModified: Date.now()
      });
      
      const dataTransfer = new DataTransfer();
      dataTransfer.items.add(croppedFile);
      currentInput.files = dataTransfer.files;

      // Show preview with enhanced display
      showImagePreview(currentInput, canvas.toDataURL('image/jpeg', 0.9));
      
      closeModal();
      showToast('Image cropped successfully!', 'success');
    }, 'image/jpeg', 0.9);
  }

  function showImagePreview(input, imageSrc) {
    const container = input.closest('.image-upload-container');
    const uploadLabel = container.querySelector('.upload-label');
    const previewContainer = container.querySelector('.preview-container');
    const previewImage = container.querySelector('.preview-image');
    
    // Hide upload label and show preview
    uploadLabel.style.display = 'none';
    previewContainer.classList.remove('hidden');
    previewImage.src = imageSrc;
    
    // Add a subtle animation
    previewContainer.style.opacity = '0';
    previewContainer.style.transform = 'scale(0.9)';
    
    setTimeout(() => {
      previewContainer.style.opacity = '1';
      previewContainer.style.transform = 'scale(1)';
      previewContainer.style.transition = 'all 0.3s ease';
    }, 50);
  }

  function changeImage(button) {
    const container = button.closest('.image-upload-container');
    const input = container.querySelector('.image-input');
    input.click();
  }

  function removeImage(button) {
    const container = button.closest('.image-upload-container');
    const input = container.querySelector('.image-input');
    const uploadLabel = container.querySelector('.upload-label');
    const previewContainer = container.querySelector('.preview-container');
    
    // Clear the input
    input.value = '';
    
    // Hide preview and show upload label
    previewContainer.classList.add('hidden');
    uploadLabel.style.display = 'flex';
    
    showToast('Image removed', 'info');
  }

  function cancelCrop() {
    if (currentInput) {
      currentInput.value = ''; // Clear the input
    }
    closeModal();
  }

  function closeModal() {
    cropper?.destroy();
    cropper = null;
    document.getElementById("cropperModal").classList.add("hidden");
    document.body.style.overflow = 'auto';
  }

  function validateProductForm() {
    let valid = true;
    document.querySelectorAll('.text-red-500').forEach(el => el.classList.add('hidden'));

    const name = document.getElementsByName("name")[0].value.trim();
    const category = document.getElementsByName("category")[0].value.trim();
    const description = document.getElementsByName("description")[0].value.trim();

    if (!name) {
      document.getElementById("name-error").innerText = "Product name is required";
      document.getElementById("name-error").classList.remove("hidden");
      valid = false;
    }

    if (!category) {
      document.getElementById("category-error").innerText = "Please select a category";
      document.getElementById("category-error").classList.remove("hidden");
      valid = false;
    }

    if (!description) {
      document.getElementById("description-error").innerText = "Description is required";
      document.getElementById("description-error").classList.remove("hidden");
      valid = false;
    }

    // Check if at least one variant exists
    const variantsContainer = document.getElementById('variantsSection');
    if (variantsContainer.children.length === 0) {
      Swal.fire({
        title: 'No Variants Added',
        text: 'Please add at least one product variant.',
        icon: 'warning',
        customClass: {
          popup: 'rounded-2xl'
        }
      });
      valid = false;
      return valid;
    }

    // Validate each variant has at least one image
    const variants = document.querySelectorAll('#variantsSection > div[data-index]');
    let hasImageError = false;

    variants.forEach((variant, index) => {
      const firstImageInput = variant.querySelector('input[type="file"]');
      if (!firstImageInput || !firstImageInput.files || firstImageInput.files.length === 0) {
        showToast(`Variant ${index + 1} requires at least one image`, 'error');
        hasImageError = true;
        valid = false;
      }
    });

    if (hasImageError) {
      return valid;
    }

    return valid;
  }

  function showToast(message, type = 'success') {
    const toast = document.getElementById('toast');
    const toastIcon = document.getElementById('toastIcon');
    const toastMessage = document.getElementById('toastMessage');
    
    const icons = {
      success: '<div class="w-6 h-6 bg-green-100 rounded-full flex items-center justify-center"><i class="fas fa-check text-green-600"></i></div>',
      error: '<div class="w-6 h-6 bg-red-100 rounded-full flex items-center justify-center"><i class="fas fa-exclamation-circle text-red-600"></i></div>',
      warning: '<div class="w-6 h-6 bg-yellow-100 rounded-full flex items-center justify-center"><i class="fas fa-exclamation-triangle text-yellow-600"></i></div>',
      info: '<div class="w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center"><i class="fas fa-info-circle text-blue-600"></i></div>'
    };
    
    toastIcon.innerHTML = icons[type] || icons.success;
    toastMessage.textContent = message;
    
    toast.classList.remove('translate-x-full');
    
    setTimeout(() => {
      toast.classList.add('translate-x-full');
    }, 4000);
    
    document.getElementById('closeToast').onclick = () => {
      toast.classList.add('translate-x-full');
    };
  }

  // Form submission
  document.getElementById("productForm").addEventListener("submit", async function (e) {
    e.preventDefault();
    
    if (!validateProductForm()) return;

    const form = e.target;
    const submitBtn = form.querySelector('button[type="submit"]');
    const originalContent = submitBtn.innerHTML;
    
    // Add loading state
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Adding Product...';
    submitBtn.disabled = true;

    const formData = new FormData(form);

    // Collect variants data
    const variants = [];
    document.querySelectorAll('#variantsSection > div[data-index]').forEach((variantBlock) => {
      const index = variantBlock.getAttribute('data-index');
      const variant = {
        type: variantBlock.querySelector(`[name="variants[${index}][type]"]`).value,
        color: variantBlock.querySelector(`[name="variants[${index}][color]"]`).value,
        quantity: parseInt(variantBlock.querySelector(`[name="variants[${index}][quantity]"]`).value),
        regularPrice: parseFloat(variantBlock.querySelector(`[name="variants[${index}][regularPrice]"]`).value),
        salesPrice: parseFloat(variantBlock.querySelector(`[name="variants[${index}][salesPrice]"]`).value),
        productImage: []
      };
      variants.push(variant);
    });

    formData.append("variants", JSON.stringify(variants));

    try {
      const response = await fetch("/admin/productAdd", {
        method: "POST",
        body: formData
      });

      if (response.ok) {
        Swal.fire({
          title: 'Success!',
          text: 'Product has been added successfully.',
          icon: 'success',
          customClass: {
            popup: 'rounded-2xl'
          }
        }).then(() => {
          window.location.href = "/admin/product";
        });
      } else {
        const data = await response.json();
        throw new Error(data.message || "Error adding product");
      }
    } catch (err) {
      console.error("Fetch Error:", err);
      Swal.fire({
        title: 'Error',
        text: err.message || "Something went wrong!",
        icon: 'error',
        customClass: {
          popup: 'rounded-2xl'
        }
      });
    } finally {
      submitBtn.innerHTML = originalContent;
      submitBtn.disabled = false;
    }
  });

  // Initialize page
  document.addEventListener('DOMContentLoaded', function() {
    // Add smooth scrolling
    document.documentElement.style.scrollBehavior = 'smooth';
    
    // Auto-add first variant for better UX
    setTimeout(() => {
      addVariant();
    }, 500);

    // Close modal on escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && !document.getElementById('cropperModal').classList.contains('hidden')) {
        cancelCrop();
      }
    });
  });
</script>

<style>
  /* Custom scrollbar for better aesthetics */
  ::-webkit-scrollbar {
    width: 8px;
  }
  
  ::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
  }
  
  ::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 4px;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
  }

  /* Ensure smooth transitions */
  * {
    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 150ms;
  }

  /* Card shadow utility */
  .card-shadow {
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  /* Ensure main content scrolls properly */
  main {
    height: calc(100vh - 80px);
    overflow-y: auto;
    overflow-x: hidden;
  }

  /* Smooth scroll behavior */
  html {
    scroll-behavior: smooth;
  }

  /* Fix for mobile responsiveness */
  @media (max-width: 768px) {
    main {
      height: calc(100vh - 60px);
      padding: 1rem;
    }
  }

  /* Form animations */
  .space-y-2 > input:focus,
  .space-y-2 > select:focus,
  .space-y-2 > textarea:focus {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(138, 43, 226, 0.15);
  }

  /* Variant animations */
  [data-index] {
    transition: all 0.3s ease;
  }

  /* Enhanced image upload styling */
  .image-upload-container {
    position: relative;
    overflow: hidden;
  }

  .upload-label:hover {
    border-color: #8a2be2 !important;
    background-color: rgba(138, 43, 226, 0.05) !important;
  }

  .upload-label:hover i {
    color: #8a2be2;
    transform: scale(1.1);
  }

  .preview-container {
    position: relative;
    overflow: hidden;
  }

  .preview-container:hover .preview-image {
    transform: scale(1.05);
  }

  .preview-image {
    transition: transform 0.3s ease;
  }

  /* Cropper modal enhancements */
  #cropperModal {
    backdrop-filter: blur(4px);
  }

  #cropperModal .bg-white {
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  }

  /* Toast notification styling */
  #toast {
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }

  /* Required field indicator */
  input[required] + label::after,
  select[required] + label::after {
    content: " *";
    color: #ef4444;
  }

  /* Loading state for submit button */
  button:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }

  /* Image validation feedback */
  .image-input:invalid + label {
    border-color: #ef4444;
    background-color: rgba(239, 68, 68, 0.05);
  }
</style>

</body>
</html>
